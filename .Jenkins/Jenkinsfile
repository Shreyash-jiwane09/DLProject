pipeline {
  agent any

  environment {
    ECR_REPOSITORY = credentials('ECR_REPOSITORY')       // Full ECR repo URL
    AWS_ACCOUNT_ID = credentials('AWS_ACCOUNT_ID')
    AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    AWS_REGION = 'ap-south-1'
  }

  stages {
    stage('CI - Lint and Unit Tests') {
      steps {
        script {
          echo "✅ Linting repository..."
          echo "✅ Running unit tests..."
        }
      }
    }

    stage('Login to ECR') {
      steps {
        script {
          sh '''
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region $AWS_REGION
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
          '''
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        script {
          sh '''
            docker build -t $ECR_REPOSITORY:latest .
          '''
        }
      }
    }

    stage('Push Docker Image to ECR') {
      steps {
        script {
          sh '''
            docker push $ECR_REPOSITORY:latest
          '''
        }
      }
    }

    stage('CD - Deploy on EC2') {
      steps {
        sshagent(['ssh_key']) {
          sh '''
            ssh -o StrictHostKeyChecking=no ubuntu@13.127.126.39 << 'EOF'
              export IMAGE_NAME='${ECR_REPOSITORY}:latest'
              export AWS_REGION='${AWS_REGION}'
              export AWS_ACCOUNT_ID='${AWS_ACCOUNT_ID}'

              aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

              wget -O docker-compose.yml https://raw.githubusercontent.com/Shreyash-jiwane09/DLProject/refs/heads/main/docker-compose.yml

              IMAGE_NAME=$IMAGE_NAME docker compose up -d --pull always
            EOF
          '''
        }
      }
    }
  }

  post {
    always {
      script {
        sh 'docker system prune -f'
      }
    }
  }
}
